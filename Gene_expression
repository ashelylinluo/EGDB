这是带有详细中文注释的代码版本：

```html
<!DOCTYPE html> <!-- 指定 HTML5 文档类型 -->
<html lang="en"> <!-- 设置页面的语言为英文 -->
<head>
   <meta charset="UTF-8"> <!-- 设置字符编码为 UTF-8，支持多语言字符 -->
   <meta name="viewport" content="width=device-width, initial-scale=1.0"> <!-- 设置视口，确保页面在移动设备上显示良好 -->
   <title>Gene Expression Network and Heatmap</title> <!-- 页面标题，将显示在浏览器标签栏中 -->
   <script src="plotly-2.27.1.min.js"></script> <!-- 引入 Plotly 库，用于绘制图表 -->
   <script src="cytoscape.min.js"></script> <!-- 引入 Cytoscape.js 库，用于网络可视化 -->
   <script src="papaparse.min.js"></script> <!-- 引入 PapaParse 库，用于解析 CSV 文件 -->
   <style>
       body { 
           margin: 0; 
           font-family: Arial, sans-serif; /* 设置字体 */
           height: 100vh;
           overflow: hidden; /* 防止页面滚动 */
       }
       .container { 
           display: flex; 
           flex-direction: column;
           width: 100%;
           height: 100vh; /* 设置容器高度 */
       }
       .header {
           background-color: #f4f4f4; /* 设置标题栏背景色 */
           padding: 10px; /* 内边距 */
           display: flex; /* 使用 Flex 布局 */
           align-items: center; /* 垂直居中对齐 */
           gap: 10px; /* 子元素之间的间距 */
       }
       .visualization { 
           flex: 1; 
           display: flex; 
           flex-direction: column; 
           padding: 10px; 
           gap: 10px; /* 各个可视化区域的间距 */
           overflow-y: auto; /* 启用垂直滚动条 */
       }
       .chart-container { 
           border: 1px solid #ddd; /* 边框 */
           height: calc(33vh - 20px); /* 图表容器高度 */
           min-height: 550px; /* 最小高度 */
       }
       #heatmap { width: 100%; } <!-- 热图的宽度设置为100% -->
       #network-container { width: 100%; } <!-- 基因网络容器的宽度设置为100% -->
       #gene-search-panel { width: 100%; } <!-- 基因搜索面板的宽度设置为100% -->
       .search-container {
           padding: 10px;
           background-color: #fff;
           border: 1px solid #ddd;
           margin-bottom: 10px;
       }
       .search-input {
           width: 200px;
           padding: 5px;
           margin-right: 10px;
       }
       .search-button {
           padding: 5px 10px;
           background-color: #0074D9;
           color: white;
           border: none;
           cursor: pointer;
       }
       .search-button:hover {
           background-color: #0056b3; /* 悬停时改变按钮背景色 */
       }
       #gene-expression-plot {
           width: 100%;
           height: 100%;
       }
   </style>
</head>
<body>
   <div class="container">
       <header class="header">
           <label for="species-select">Select Species:</label> <!-- 物种选择标签 -->
           <select id="species-select"> <!-- 物种选择下拉框 -->
               <!-- 提供不同物种的选项 -->
               <option value="Arundo_donax.csv">Arundo donax</option>
               <option value="Cenchrus_fungigraminus.csv">Cenchrus fungigraminus</option>
               <option value="Cenchrus_purpureus.csv">Cenchrus purpureus</option>
               <option value="Cenchrus_purpureus_purple.csv">Cenchrus purpureus purple</option>
               <option value="Miscanthus_lutarioriparius.csv">Miscanthus lutarioriparius</option>
               <option value="Miscanthus_sacchariflorus.csv" selected>Miscanthus sacchariflorus</option>
               <option value="Miscanthus_sinensis.csv">Miscanthus sinensis</option>
               <option value="Phragmites_australis.csv">Phragmites australis</option>
               <option value="Setaria_viridis.csv">Setaria viridis</option>
           </select>
           <div class="search-container">
               <input type="text" id="gene-search" class="search-input" placeholder="Enter gene ID..."> <!-- 基因搜索输入框 -->
               <button id="search-button" class="search-button">Search Gene</button> <!-- 基因搜索按钮 -->
           </div>
       </header>

       <main class="visualization">
           <div id="heatmap" class="chart-container"></div> <!-- 热图容器 -->
           <div id="network-container" class="chart-container"></div> <!-- 基因网络容器 -->
           <div id="gene-search-panel" class="chart-container">
               <div id="gene-expression-plot"></div> <!-- 基因表达柱状图容器 -->
           </div>
       </main>
   </div>

   <script>
       let currentData = null; /* 存储当前物种数据 */
       const speciesSelect = document.getElementById('species-select'); /* 获取物种选择元素 */
       const geneSearchInput = document.getElementById('gene-search'); /* 获取基因搜索输入框 */
       const searchButton = document.getElementById('search-button'); /* 获取搜索按钮 */
       
       speciesSelect.addEventListener('change', loadSpeciesData); /* 监听物种选择更改事件 */
       searchButton.addEventListener('click', searchGene); /* 监听搜索按钮点击事件 */
       
       function loadSpeciesData() { /* 加载物种数据 */
           const selectedSpecies = speciesSelect.value; /* 获取选定物种的文件名 */
           Papa.parse(`./${selectedSpecies}`, {
               download: true,
               header: true,
               dynamicTyping: true,
               skipEmptyLines: true,
               complete: function(results) {
                   try {
                       currentData = results.data; /* 解析完成后将数据存储 */
                       const topGenes = currentData
                           .filter(row => row && row.gene_id) /* 过滤出具有基因 ID 的数据 */
                           .sort((a, b) => averageExpression(b) - averageExpression(a)) /* 根据平均表达量排序 */
                           .slice(0, 20); /* 选择前 20 个基因 */

                       const labels = Object.keys(topGenes[0]).slice(1); /* 获取标签 */
                       const geneIds = topGenes.map(row => row.gene_id); /* 提取基因 ID */
                       const expressionData = topGenes.map(row => 
                           Object.values(row)
                               .slice(1)
                               .map(v => log2Transform(Number(v))) /* 转换表达量为 log2 */
                       );

                       drawHeatmap(labels, geneIds, expressionData); /* 绘制热图 */
                       drawNetwork(geneIds, expressionData); /* 绘制基因网络 */
                   } catch (error) {
                       console.error('Error processing data:', error); /* 捕获并显示错误信息 */
                   }
               },
               error: function(error) {
                   console.error('Error loading CSV:', error); /* 显示 CSV 加载错误 */
               }
           });
       }

       function searchGene() { /* 基因搜索功能 */
           const searchTerm = geneSearchInput.value.trim(); /* 获取并去除空格的搜索词 */
           if (!searchTerm || !currentData) return;

           const geneData = currentData.find(row => row.gene_id.includes(searchTerm)); /* 搜索基因 ID */
           if (geneData) {
               const tissues = Object.keys(geneData).slice(1); /* 获取组织信息 */
               const expressionValues = tissues.map(tissue => Number(geneData[tissue])); /* 获取表达量数据 */
               
               const trace = {
                   x: tissues, /* 横轴数据 */
                   y: expressionValues, /* 纵轴数据 */
                   type: 'bar', /* 绘制柱状图 */
                   name: geneData.gene_id,
                   marker: {
                       color: '#0074D9' /* 设置柱状图颜色 */
                   }
               };

               const layout = {
                   title: `Expression Profile for ${geneData.gene_id}`, /* 图表标题 */
                   xaxis: {
                       title: 'Tissues',
                       tickangle: -45
                   },
                   yaxis: {
                       title: 'Expression Level (TPM)' /* 纵轴标题 */
                   },
                   margin: {
                       b: 150
                   }
               };

               const config = {
                   responsive: true
               };

               Plotly.newPlot('gene-expression-plot', [trace], layout, config); /* 使用 Plotly 绘制图表 */
           } else {
               alert('Gene not found!'); /* 如果没有找到基因，弹出提示 */
           }
       }

       function averageExpression(gene) {
           const values = Object.values(gene).slice(1).map(Number);
           return values.reduce((a,  b) => a + b, 0) / values.length; /* 计算表达量的平均值 */
       }

       function log2Transform(value) {
           if (!Number.isFinite(value)) return 0; /* 如果不是有限数字则返回 0 */
           return Math.log2(Math.max(value, 0) + 1); /* 对表达量进行 log2 转换 */
       }

       function drawHeatmap(labels, geneIds, expressionData) { /* 绘制热图函数 */
           if (!Array.isArray(expressionData) || !expressionData.length || 
               !Array.isArray(labels) || !Array.isArray(geneIds)) {
               console.error('Invalid data format for heatmap'); /* 如果数据格式无效，输出错误信息 */
               return;
           }

           const validData = expressionData.map(row => 
               row.map(val => (Number.isFinite(val) ? val : 0)) /* 确保所有数据都是有效数值 */
           );

           const data = [{
               z: validData, /* 热图数据 */
               x: labels, /* 横轴标签 */
               y: geneIds, /* 纵轴标签 */
               type: 'heatmap', /* 热图类型 */
               colorscale: [
                   [0, 'rgb(255, 255, 204)'], /* 设置颜色比例 */
                   [1, 'rgb(0, 0, 128)']
               ],
               colorbar: {
                   len: 0.45,
                   thickness: 24,
                   tickfont: { size: 10 },
                   title: {
                       text: 'log2(TPM+1)', /* 颜色条标题 */
                       font: { size: 10 }
                   }
               },
               hoverongaps: false,
               showscale: true
           }];

           const layout = {
               title: 'Top Genes Heatmap (log2 transformed)', /* 热图标题 */
               xaxis: {
                   title: 'Samples', /* 横轴标题 */
                   tickangle: -45, /* 标签角度 */
                   tickfont: {
                       size: 10
                   },
                   automargin: true,
                   fixedrange: true /* 固定范围，避免缩放 */
               },
               yaxis: {
                   title: 'Genes', /* 纵轴标题 */
                   automargin: true,
                   fixedrange: true
               },
               margin: {
                   t: 50,
                   r: 30,
                   b: 150,
                   l: 200
               },
               height: 600,
               autosize: true
           };

           const config = { 
               responsive: true,
               displayModeBar: true,
               modeBarButtonsToRemove: ['zoomIn2d', 'zoomOut2d', 'autoScale2d'], /* 移除部分控制按钮 */
               toImageButtonOptions: {
                   format: 'svg',
                   filename: 'gene_expression_heatmap',
                   height: 800,
                   width: 1200,
                   scale: 1
               }
           };
           
           try {
               Plotly.newPlot('heatmap', data, layout, config).catch(error => {
                   console.error('Error plotting heatmap:', error); /* 捕获绘图错误 */
               });
           } catch (error) {
               console.error('Error creating heatmap:', error); /* 捕获创建热图的错误 */
           }
       }

       function drawNetwork(geneIds, expressionData) { /* 绘制基因网络函数 */
           const elements = geneIds.map(id => ({ data: { id } })); /* 创建节点数据 */
           const degrees = {};

           for (let i = 0; i < geneIds.length; i++) {
               degrees[geneIds[i]] = 0; /* 初始化节点的度 */
               for (let j = i + 1; j < geneIds.length; j++) {
                   const corr = pearsonCorrelation(expressionData[i], expressionData[j]); /* 计算相关性 */
                   if (corr >= 0.8) { /* 相关性阈值 */
                       elements.push({ data: { source: geneIds[i], target: geneIds[j] } }); /* 添加边 */
                       degrees[geneIds[i]]++;
                       degrees[geneIds[j]]++;
                   }
               }
           }

           const cy = cytoscape({
               container: document.getElementById('network-container'), /* 网络容器 */
               elements: elements, /* 节点和边的数据 */
               layout: { name: 'circle' }, /* 布局为圆形 */
               style: [
                   { selector: 'node', style: {
                       'background-color': ele => degrees[ele.id()] > 5 ? 'red' : '#0074D9', /* 根据节点度数设置颜色 */
                       'label': 'data(id)' /* 显示节点 ID */
                   }},
                   { selector: 'edge', style: { 'line-color': '#ccc', 'width': 1.5 } } /* 设置边的颜色和宽度 */
               ]
           });
       }

       function pearsonCorrelation(x, y) { /* 计算皮尔逊相关系数 */
           const n = x.length;
           const sumX = x.reduce((a, b) => a + b, 0);
           const sumY = y.reduce((a, b) => a + b, 0);
           const sumXY = x.reduce((acc, _, i) => acc + x[i] * y[i], 0);
           const sumX2 = x.reduce((a, b) => a + b ** 2, 0);
           const sumY2 = y.reduce((a, b) => a + b ** 2, 0);
           return (n * sumXY - sumX * sumY) / Math.sqrt((n * sumX2 - sumX ** 2) * (n * sumY2 - sumY ** 2)); /* 返回相关系数 */
       }

       // 初始加载
       loadSpeciesData(); /* 调用加载数据函数 */
   </script>
</body>
</html>
``` 

这是完整的代码注释版，希望对您理解代码逻辑和各部分功能有所帮助！
