好的，以下是添加了中文注释的完整代码：

```html
<!DOCTYPE html> <!-- 声明文档类型为 HTML5 -->
<html lang="en"> <!-- 设置网页语言为英语 -->
<head>
    <!-- 设置页面的元信息 -->
    <meta charset="UTF-8"> <!-- 设置字符编码为 UTF-8 -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0"> <!-- 设置视口以适应移动设备 -->
    <title>Orthogroup Search Interface</title> <!-- 页面标题 -->

    <!-- 引入 CSS 文件 -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css"> <!-- Bootstrap 样式表 -->

    <!-- 引入 JavaScript 库 -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script> <!-- jQuery 库 -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script> <!-- Bootstrap JavaScript -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/echarts/5.4.3/echarts.min.js"></script> <!-- ECharts 图表库 -->

    <style>
        /* 定义侧边栏样式 */
        .sidebar {
            height: 100vh; /* 设定高度为视口高度 */
            padding: 20px; /* 设置内边距 */
            background-color: #f8f9fa; /* 设置背景颜色 */
            border-right: 1px solid #dee2e6; /* 添加右侧边框 */
            overflow-y: auto; /* 启用垂直滚动 */
        }
        /* 主内容区域样式 */
        .main-content {
            padding: 20px; /* 设置内边距 */
            height: 100vh; /* 设定高度为视口高度 */
            overflow-y: auto; /* 启用垂直滚动 */
        }
        /* 图表容器样式 */
        .chart-container {
            height: 500px; /* 高度 */
            margin-bottom: 30px; /* 底部外边距 */
            border: 1px solid #dee2e6; /* 边框 */
            padding: 15px; /* 内边距 */
            border-radius: 5px; /* 圆角 */
        }
        /* 基因列表样式 */
        .gene-list {
            max-height: 400px; /* 最大高度 */
            overflow-y: auto; /* 启用垂直滚动 */
            border: 1px solid #dee2e6; /* 边框 */
            padding: 15px; /* 内边距 */
            border-radius: 5px; /* 圆角 */
        }
        /* 物种部分样式 */
        .species-section {
            margin-bottom: 15px; /* 底部外边距 */
            padding: 10px; /* 内边距 */
            background-color: #f8f9fa; /* 背景颜色 */
            border-radius: 5px; /* 圆角 */
        }
        /* 物种标题样式 */
        .species-header {
            font-weight: bold; /* 加粗字体 */
            color: #2c3e50; /* 字体颜色 */
            margin-bottom: 8px; /* 底部外边距 */
            padding: 5px; /* 内边距 */
            background-color: #e9ecef; /* 背景颜色 */
            border-radius: 3px; /* 圆角 */
        }
        /* 基因条目样式 */
        .gene-item {
            padding: 5px 10px; /* 内边距 */
            margin: 3px 0; /* 上下外边距 */
            background-color: #fff; /* 背景颜色 */
            border: 1px solid #e9ecef; /* 边框 */
            border-radius: 3px; /* 圆角 */
            font-family: monospace; /* 设置字体 */
            display: flex; /* 使用 flex 布局 */
            align-items: center; /* 垂直居中对齐 */
        }
        /* 物种标签样式 */
        .species-label {
            display: inline-block; /* 内联块元素 */
            padding: 2px 6px; /* 内边距 */
            margin-right: 8px; /* 右外边距 */
            background-color: #e9ecef; /* 背景颜色 */
            border-radius: 3px; /* 圆角 */
            font-size: 0.9em; /* 字体大小 */
            min-width: 120px; /* 最小宽度 */
        }
        /* 数据路径信息样式 */
        .data-paths {
            font-size: 0.8em; /* 字体大小 */
            color: #666; /* 字体颜色 */
            margin-bottom: 20px; /* 底部外边距 */
            padding: 10px; /* 内边距 */
            background-color: #f1f1f1; /* 背景颜色 */
            border-radius: 5px; /* 圆角 */
        }
        /* 加载动画样式 */
        .loading-overlay {
            display: none; /* 初始隐藏 */
            position: fixed; /* 固定定位 */
            top: 0; /* 顶部位置 */
            left: 0; /* 左侧位置 */
            width: 100%; /* 全宽 */
            height: 100%; /* 全高 */
            background-color: rgba(255, 255, 255, 0.8); /* 半透明背景 */
            z-index: 9999; /* 优先显示 */
            justify-content: center; /* 水平居中对齐 */
            align-items: center; /* 垂直居中对齐 */
        }
        /* 加载旋转器样式 */
        .loading-spinner {
            width: 50px; /* 宽度 */
            height: 50px; /* 高度 */
            border: 5px solid #f3f3f3; /* 边框颜色 */
            border-top: 5px solid #3498db; /* 顶部边框颜色 */
            border-radius: 50%; /* 圆形 */
            animation: spin 1s linear infinite; /* 添加旋转动画 */
        }
        /* 错误提示框样式 */
        .error-alert {
            position: fixed; /* 固定定位 */
            top: 20px; /* 顶部距离 */
            right: 20px; /* 右侧距离 */
            padding: 15px 20px; /* 内边距 */
            background-color: #f8d7da; /* 背景颜色 */
            border: 1px solid #f5c6cb; /* 边框颜色 */
            border-radius: 4px; /* 圆角 */
            color: #721c24; /* 字体颜色 */
            box-shadow: 0 2px 5px rgba(0,0,0,0.2); /* 阴影效果 */
            z-index: 1000; /* 优先显示 */
            max-width: 400px; /* 最大宽度 */
        }
        /* 警告提示样式 */
        .error-alert.warning {
            background-color: #fff3cd; /* 背景颜色 */
            border-color: #ffeeba; /* 边框颜色 */
            color: #856404; /* 字体颜色 */
        }
        /* 旋转动画关键帧 */
        @keyframes spin {
            0% { transform: rotate(0deg); } /* 开始角度 */
            100% { transform: rotate(360deg); } /* 完成旋转一周 */
        }
        /* 禁止滚动 */
        body {
            overflow: hidden;
        }
    </style>
</head>
<body>
    <!-- 加载覆盖层 -->
    <div class="loading-overlay">
        <div class="loading-spinner"></div> <!-- 加载旋转器 -->
    </div>

    <div class="container-fluid">
        <div class="row">
            <!-- 左侧边栏 -->
            <div class="col-md-3 sidebar">
                <h3 class="mb-4">Orthogroup Search</h3>
                
                <!-- 数据路径信息 -->
                <div class="data-paths mb-4">
                    <small>
                        <div>Gene Count: ./Orthogroups_GeneCount.csv</div> <!-- 基因计数文件路径 -->
                        <div>Orthogroups: ./Orthogroups.csv</div> <!-- Orthogroups 文件路径 -->
                        <div>Tree Files: ./Gene_Trees</div> <!-- 树文件路径 -->
                    </small>
                </div>

                <!-- 搜索区域 -->
                <div class="mb-4">
                    <label for="orthogroupInput" class="form-label">Orthogroup ID</label> <!-- Orthogroup ID 标签 -->
                    <div class="input-group">
                        <input type="text" id="orthogroupInput" class="form-control" placeholder="e.g., OG0000000"> <!-- 输入框 -->
                        <button id="searchButton" class="btn btn-primary">Search</button> <!-- 搜索按钮 -->
                    </div>
                    <button id="demoButton" class="btn btn-secondary mt-2 w-100">Load Demo (OG0000000)</button> <!-- 加载演示数据按钮 -->
                </
```html
                </div> <!-- 搜索区域结束 -->

                <!-- 树文件下载 -->
                <div class="mb-4">
                    <h5>Tree File</h5> <!-- 树文件标题 -->
                    <button id="downloadTreeButton" class="btn btn-outline-primary w-100" disabled>Download Tree File</button> <!-- 树文件下载按钮 -->
                </div>
            </div> <!-- 左侧边栏结束 -->

            <!-- 右侧主内容区域 -->
            <div class="col-md-9 main-content">
                <!-- 结果概览卡片 -->
                <div class="card mb-4">
                    <div class="card-body">
                        <h4 class="card-title">Result Overview</h4> <!-- 结果概览标题 -->
                        <div class="row">
                            <div class="col-md-6">
                                <p class="mb-2">Orthogroup ID: <strong id="orthogroupIDDisplay">-</strong></p> <!-- 显示 Orthogroup ID -->
                            </div>
                            <div class="col-md-6">
                                <p class="mb-2">Total Genes: <strong id="totalGenes">-</strong></p> <!-- 显示基因总数 -->
                            </div>
                        </div>
                    </div>
                </div> <!-- 结果概览结束 -->

                <!-- 数据表格 -->
                <div class="card mb-4">
                    <div class="card-body">
                        <h4 class="card-title">Search Result</h4> <!-- 搜索结果标题 -->
                        <div class="table-responsive">
                            <table class="table table-striped" id="geneTable">
                                <thead>
                                    <tr>
                                        <th>Species Name</th> <!-- 列标题：物种名称 -->
                                        <th>Gene Count</th> <!-- 列标题：基因数 -->
                                        <th>Percentage</th> <!-- 列标题：百分比 -->
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- 动态填充的数据行 -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div> <!-- 数据表格结束 -->

                <!-- 图表 -->
                <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="chart-container" id="barChart"></div> <!-- 条形图容器 -->
                    </div>
                    <div class="col-md-6">
                        <div class="chart-container" id="pieChart"></div> <!-- 饼图容器 -->
                    </div>
                </div> <!-- 图表结束 -->

                <!-- 基因列表 -->
                <div class="card mb-4">
                    <div class="card-body">
                        <h4 class="card-title">Detailed Gene List</h4> <!-- 详细基因列表标题 -->
                        <div id="geneList" class="gene-list">
                            <!-- JavaScript 动态填充基因列表 -->
                        </div>
                    </div>
                </div> <!-- 基因列表结束 -->

                <!-- 导出选项 -->
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">Export Options</h4> <!-- 导出选项标题 -->
                        <button id="exportCSVButton" class="btn btn-success me-2">Export as CSV</button> <!-- 导出 CSV 按钮 -->
                        <button id="exportExcelButton" class="btn btn-success">Export as Excel</button> <!-- 导出 Excel 按钮 -->
                    </div>
                </div> <!-- 导出选项结束 -->
            </div> <!-- 主内容区域结束 -->
        </div> <!-- row 结束 -->
    </div> <!-- container-fluid 结束 -->

    <!-- JavaScript 代码 -->
    <script>
        // 初始化图表
        let barChart = null; // 条形图变量
        let pieChart = null; // 饼图变量
        let currentOrthogroup = ''; // 当前 Orthogroup ID

        // 物种名称映射关系
        const speciesMapping = {
            'CpA': 'Cenchrus purpureus cv purple',
            'Penpu': 'Cenchrus purpureus',
            'Pgi': 'Cenchrus fungigraminus',
            'rna-NCGR_LOCUS': 'Miscanthus lutarioriparius',
            'rna-XM_066': 'Miscanthus floridulus',
            'Misin': 'Miscanthus sinensis',
            'rna-XM_034': 'Setaria viridis',
            'rna-XM_062': 'Phragmites australis',
            'PMA': 'Cenchrus americanus'
        };

        // 基因前缀到物种的映射
        const geneToSpecies = {
            'CpA': 'Cenchrus_purpureus_purple',
            'Penpu': 'Cenchrus_purpureus',
            'Pgi': 'Cenchrus_fungigraminus',
            'rna-NCGR_LOCUS': 'Miscanthus_lutarioriparius',
            'rna-XM_066': 'Miscanthus_floridulus',
            'Misin': 'Miscanthus_sinensis',
            'rna-XM_034': 'Setaria_viridis',
            'rna-XM_062': 'Phragmites_australis',
            'PMA': 'Cenchrus_americanus'
        };

        // 工具函数
        function showLoading() { // 显示加载动画
            $('.loading-overlay').css('display', 'flex');
        }

        function hideLoading() { // 隐藏加载动画
            $('.loading-overlay').css('display', 'none');
        }

        function showError(message, isWarning = false) { // 显示错误信息
            const errorDiv = $('<div>')
                .addClass('error-alert')
                .addClass(isWarning ? 'warning' : '')
                .text(message);
            
            $('body').append(errorDiv);
            
            setTimeout(() => {
                errorDiv.fadeOut(300, function() {
                    $(this).remove();
                });
            }, 3000); // 3秒后自动移除错误提示
        }

        function cleanSpeciesName(name) { // 去掉文件后缀的物种名称
            return name.replace('.pep', '').replace('.fa', '');
        }

        function getFormattedSpeciesName(name) { // 返回格式化的物种名称
            return name;
        }

        function getSpeciesPrefixFromGene(gene) { // 根据基因ID前缀获取物种
            for (const prefix in geneToSpecies) {
                if (gene.startsWith(prefix)) {
                    return geneToSpecies[prefix];
                }
            }
            return null;
        }

        // 解析CSV内容的函数
        function parseCSV(content) {
            try {
                const lines = content.trim().split('\n'); // 按行分割
                if (lines.length === 0) {
                    throw new Error('文件内容为空');
                }

                const headers = lines[0].split(','); // 获取列标题
                if (headers.length < 2) {
                    throw new Error('文件格式错误：列数不足');
                }

                const data = {}; // 数据存储对象
                
                lines.slice(1).forEach((line, index) => {
                    const values = line.split(',');
                    if (values.length !== headers.length) {
                        console.warn(`警告: 第 ${index + 2} 行列数与标题不符`);
                        return;
                    }
                    
                    const orthogroup = values[0];
                    const counts = {};
                    
                    headers.slice(1).forEach((header, idx) => {
                        counts[header.trim()] = parseInt(values[idx + 1]) || 0;
                    });
                    
                    data[orthogroup] = counts;
                });
                
                return data; // 返回解析后的数据
            } catch (error) {
                console.error('解析CSV时出错:', error);
                throw new Error('解析文件内容失败: ' + error.message);
            }
        }

        // 加载数据的函数
        async function loadOrthogroupData(orthogroupId) {
            try {
                const filePath = './Orthogroups_GeneCount.csv'; // 文件路径
                console.log('尝试读取文件:', filePath);
                
                const response = await fetch(filePath);
                if (!response.ok) {
                    throw new Error(`HTTP 错误！状态: ${response.status}`);
                }
                const text = await response.text();
                
                if (!text) {
                    throw new Error('读取基因计数文件时响应为空');
                }

                console.log('基因计数文件内容预览:', text.substring(0, 200)); // 预览内容
                
                const data = parseCSV(text); // 解析内容
                console.log('解析的数据结构:', Object.keys(data).length, 'orthogroups found');
                
                if (!data[orthogroupId]) {
                    throw new Error(`在基因计数数据中未找到 Orthogroup ${orthogroupId}`);
                }

                const cleanedData = {};
                Object.entries(data[orthogroupId]).forEach(([key, value]) => {
                    cleanedData[cleanSpeciesName(key)] = value;
                });
                return cleanedData; // 返回清理后的数据
            } catch (error) {
                console.error('加载基因计数数据时出错:', error);
                throw new Error(`加载基因计数数据失败: ${
                error.message}`);
            }
        }

        // 加载 Orthogroup 基因详细数据的函数
        async function loadOrthogroupGenesData(orthogroupId) {
            try {
                const filePath = './Orthogroups.csv'; // 文件路径
                console.log('尝试读取文件:', filePath);
                
                const response = await fetch(filePath);
                if (!response.ok) {
                    throw new Error(`HTTP 错误！状态: ${response.status}`);
                }
                const text = await response.text();
                
                if (!text) {
                    throw new Error('读取 Orthogroups 文件时响应为空');
                }

                const lines = text.trim().split('\n'); // 将文本按行分割
                const orthogroupLine = lines.find(line => line.startsWith(orthogroupId)); // 查找匹配的行
                if (!orthogroupLine) {
                    throw new Error(`在详细基因数据中未找到 Orthogroup ${orthogroupId}`);
                }

                // 解析CSV行，处理引号中的逗号
                const parts = orthogroupLine.split(/,(?=(?:(?:[^"]*"){2})*[^"]*$)/);
                const genesData = {};

                // 处理基因列表，从第二个元素开始（第一个是 orthogroupId）
                for (let i = 1; i < parts.length; i++) {
                    const genes = parts[i].trim()
                        .replace(/^"/, '') // 去除开头的引号
                        .replace(/"$/, '') // 去除结尾的引号
                        .split(/\s*,\s*/); // 通过逗号分割

                    genes.forEach(gene => {
                        if (gene.trim()) {
                            const speciesPrefix = getSpeciesPrefixFromGene(gene.trim()); // 获取物种前缀
                            if (speciesPrefix) {
                                if (!genesData[speciesPrefix]) {
                                    genesData[speciesPrefix] = [];
                                }
                                genesData[speciesPrefix].push(gene.trim());
                            }
                        }
                    });
                }

                return genesData; // 返回基因数据
            } catch (error) {
                console.error('加载详细基因数据时出错:', error);
                throw new Error(`加载详细基因数据失败: ${error.message}`);
            }
        }

        // 更新可视化内容的函数
        function updateVisualizations(data) {
            const species = Object.keys(data); // 获取物种名称
            const counts = species.map(s => data[s]); // 获取各物种的基因数
            const total = counts.reduce((a, b) => a + b, 0); // 计算基因总数
            
            // 更新基因总数显示
            $('#totalGenes').text(total);

            // 更新表格内容
            const tableBody = $('#geneTable tbody');
            tableBody.empty();
            
            species.forEach(specie => {
                const count = data[specie];
                const percentage = ((count / total) * 100).toFixed(1); // 计算百分比
                const formattedSpecies = getFormattedSpeciesName(specie);
                
                const row = $('<tr>') // 新建表格行
                    .append($('<td>').text(formattedSpecies)) // 物种名称单元格
                    .append($('<td>').text(count)) // 基因数量单元格
                    .append($('<td>').text(percentage + '%')); // 百分比单元格
                    
                tableBody.append(row); // 添加行到表格
            });

            // 更新图表
            updateCharts(species, counts, data);
        }

        // 更新图表的函数
        function updateCharts(species, counts, data) {
            const formattedSpecies = species.map(s => getFormattedSpeciesName(s));

            // 更新条形图
            barChart.setOption({
                title: { 
                    text: 'Gene Distribution by Species', // 图表标题
                    left: 'center',
                    top: 20
                },
                tooltip: {
                    trigger: 'axis',
                    axisPointer: {
                        type: 'shadow'
                    }
                },
                grid: {
                    left: '10%',
                    right: '10%',
                    bottom: '20%',
                    top: '15%',
                    containLabel: true
                },
                xAxis: { 
                    type: 'category',
                    data: formattedSpecies,
                    axisLabel: { 
                        rotate: 45,
                        interval: 0,
                        formatter: function (value) {
                            return value.length > 20 ? value.substring(0, 20) + '...' : value;
                        }
                    }
                },
                yAxis: {
                    type: 'value',
                    name: 'Gene Count'
                },
                series: [{
                    name: 'Gene Count',
                    type: 'bar',
                    data: counts,
                    itemStyle: {
                        color: '#5470c6'
                    }
                }]
            });

            // 更新饼图
            pieChart.setOption({
                title: { 
                    text: 'Gene Distribution Percentage',
                    left: 'center',
                    top: 20
                },
                tooltip: {
                    trigger: 'item',
                    formatter: '{b}: {c} ({d}%)'
                },
                legend: {
                    orient: 'vertical',
                    left: 'left',
                    top: 'middle',
                    formatter: function(name) {
                        return name.length > 20 ? name.substring(0, 20) + '...' : name;
                    }
                },
                series: [{
                    name: 'Gene Distribution',
                    type: 'pie',
                    radius: '50%',
                    center: ['60%', '50%'],
                    data: formattedSpecies.map((specie, index) => ({
                        name: specie,
                        value: counts[index]
                    })),
                    emphasis: {
                        itemStyle: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }
                    }
                }]
            });
        }

        // 更新基因列表的函数
        function updateGeneList(genesData) {
            const geneListContainer = $('#geneList');
            geneListContainer.empty();

            const sortedSpecies = Object.keys(genesData).sort(); // 按字母排序物种

            sortedSpecies.forEach(species => {
                const genes = genesData[species];
                if (genes && genes.length > 0) {
                    const formattedSpecies = species;
                    const speciesSection = $('<div>').addClass('species-section');
                    const speciesHeader = $('<div>').addClass('species-header')
                        .text(`${formattedSpecies} (${genes.length} genes)`);
                    
                    const genesList = $('<div>').addClass('genes-container');
                    genes.forEach(gene => {
                        const geneItem = $('<div>').addClass('gene-item')
                            .append($('<span>').addClass('species-label').text(formattedSpecies))
                            .append($('<span>').text(gene));
                        genesList.append(geneItem);
                    });

                    speciesSection.append(speciesHeader, genesList);
                    geneListContainer.append(speciesSection); // 将物种部分添加到基因列表
                }
            });
        }

        // 导出 CSV 的函数
        function exportToCSV(data) {
            if (!data) return;
            
            const rows = [['Species', 'Gene ID']];
            Object.entries(data).forEach(([species, genes]) => {
                const formattedSpecies = species;
                genes.forEach(gene => {
                    rows.push([formattedSpecies, gene]);
                });
            });
            
            const csvContent = rows.map(row => 
                row.map(cell => 
                    typeof cell === 'string' && cell.includes(',') 
                        ? `"${cell}"` 
                        : cell
                ).join(',')
            ).join('\n');
            
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `${currentOrthogroup}_genes.csv`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        }

        // 事件监听器和触发事件代码...

    </script>
</body>
</html>
