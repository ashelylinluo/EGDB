import pandas as pd
import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.graph_objs as go
import numpy as np
import dash_bootstrap_components as dbc
import plotly.express as px

# 创建 Dash 应用实例
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

# 加载数据文件
data_file = "D:/20240222数据库/gwas/gwas.csv"
data = pd.read_csv(data_file, encoding='utf-8')

# 预处理数据
data.rename(columns={
    'SNP marker': 'SNP_marker',
    'Chromosome': 'Chromosome',
    'Position': 'Position',
    'FDR': 'FDR',
    'Trait': 'Trait'
}, inplace=True)
data['Position'] = pd.to_numeric(data['Position'], errors='coerce')
data = data.dropna(subset=['Position'])
data['FDR'] = data['FDR'].replace(0, 1e-10)

# 定义页面布局
app.layout = html.Div([
    dbc.Container([
        dbc.Row([
            dbc.Col([
                html.Label("Choose a species:"),
                dcc.Dropdown(
                    id='species-select',
                    options=[{'label': 'Miscanthus sacchariflorus', 'value': 'Miscanthus sacchariflorus'}],
                    value='Miscanthus sacchariflorus',
                    disabled=True,
                    className="mb-3"
                ),
                html.Label("Choose a trait:"),
                dcc.Dropdown(
                    id='trait-select',
                    options=[{'label': name, 'value': abbrev} for abbrev, name in {
                        "Yld": "Dry biomass yield",
                        "CC": "Compressed circumference",
                        "BC": "Basal Circumference",
                        "CmL": "Culm length",
                        "CmNdN": "Culm node number",
                        "CmDW": "Culm dry weight",
                        "IntL": "Internode length",
                        "CmV": "Culm volume",
                        "CmDW/V": "Culm Density",
                        "DBI": "Culm diameter at basal internode",
                        "DLI": "Culm diameter at last internode",
                        "TCmN": "Total number of culms",
                        "PRCm": "Proportion of reproductive culms",
                        "Cm/A": "Culms per area",
                        "HD1": "First heading date"
                    }.items()],
                    value=None,
                    className="mb-3"
                ),
                dbc.Button(
                    "Search",
                    id="search-button",
                    className="mt-3 w-100",
                    style={
                        'backgroundColor': 'rgb(143, 174, 0)',  # 浅绿色按钮
                        'border': 'none',
                        'color': 'white'  # 使文字颜色为白色，便于阅读
                    }
                )
            ], width=3),
        ], className="mb-4"),
        dbc.Row([
            dcc.Graph(id='manhattan-plot')
        ])
    ], fluid=True)
])

# 定义回调函数
@app.callback(
    Output('manhattan-plot', 'figure'),
    [Input('trait-select', 'value'),
     Input('search-button', 'n_clicks')]
)
def update_plot(trait, n_clicks):
    fig = go.Figure()

    if trait is None:
        filtered_data = data
    else:
        filtered_data = data[data['Trait'] == trait]

    chromosomes = sorted(filtered_data['Chromosome'].unique())
    colors = px.colors.qualitative.Plotly * (len(chromosomes) // 10 + 1)

    cum_pos = 0
    chr_positions = {}
    tickvals = []
    ticktext = []

    for chromosome in chromosomes:
        chr_data = filtered_data[filtered_data['Chromosome'] == chromosome]
        chr_positions[chromosome] = cum_pos + chr_data['Position']
        tickvals.append(cum_pos + chr_data['Position'].max() / 2)
        ticktext.append(f"Chr {chromosome}")
        cum_pos += chr_data['Position'].max()

    for i, chromosome in enumerate(chromosomes):
        chr_data = filtered_data[filtered_data['Chromosome'] == chromosome]
        fig.add_trace(go.Scatter(
            x=chr_positions[chromosome],
            y=-np.log10(chr_data['FDR']) + np.random.normal(0, 0.05, len(chr_data)),
            mode='markers',
            name=f"Chromosome {chromosome}",
            marker=dict(size=6, color=colors[i], opacity=0.7),
            hovertemplate=(
                "Chromosome: %{text}<br>"
                "Position: %{x}<br>"
                "-log10(p): %{y}<br>"
                "SNP marker: %{customdata}<extra></extra>"
            ),
            text=[f"{chromosome}"] * len(chr_data),
            customdata=chr_data['SNP_marker']
        ))

    fig.add_shape(type="line", x0=0, y0=8, x1=cum_pos, y1=8,
                  line=dict(color="red", width=1, dash="dash"))

    fig.update_layout(
        title="GWAS Manhattan Plot",
        xaxis=dict(title="Chromosome", tickvals=tickvals, ticktext=ticktext, ticks='outside',
                   ticklen=10, tickwidth=2, linecolor='black',
                   title_font=dict(family="Times New Roman", size=18, color="black", weight="bold"),
                   tickfont=dict(family="Times New Roman", size=14, color="black")),
        yaxis=dict(title="-log10(p)", ticks='outside', ticklen=10, tickwidth=2, linecolor='black',
                   title_font=dict(family="Times New Roman", size=18, color="black", weight="bold"),
                   tickfont=dict(family="Times New Roman", size=14, color="black")),
        height=600, template="plotly_white",
        legend=dict(title="Chromosomes", orientation="v", x=1.05, y=1, traceorder="normal",
                    font=dict(family="Times New Roman", size=14), itemsizing='constant')
    )

    return fig

# 启动应用
if __name__ == '__main__':
    app.run_server(debug=True)
